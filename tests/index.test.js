const parser = require('../index')

test('Number conversion test', () => {
  const result = parser.parserTextToBinBraille("1234567890")

  expect(result).toStrictEqual([[["0", "1"], ["0", "1"], ["1", "1"]], [["1", "0"], ["0", "0"], ["0", "0"]], [["1", "0"], ["1", "0"], ["0", "0"]], [["1", "1"], ["0", "0"], ["0", "0"]], [["1", "1"], ["0", "1"], ["0", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["1", "1"], ["1", "0"], ["0", "0"]], [["1", "1"], ["1", "1"], ["0", "0"]], [["1", "0"], ["1", "1"], ["0", "0"]], [["0", "1"], ["1", "0"], ["0", "0"]], [["0", "1"], ["1", "1"], ["0", "0"]]])
})

test('Small sentence test', () => {
  const result = parser.parserTextToBinBraille("este pode ser um texto bacana")

  expect(result).toStrictEqual([[["1", "0"], ["0", "1"], ["0", "0"]], [["0", "1"], ["1", "0"], ["1", "0"]], [["0", "1"], ["1", "1"], ["1", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["1", "1"], ["1", "0"], ["1", "0"]], [["1", "0"], ["0", "1"], ["1", "0"]], [["1", "1"], ["0", "1"], ["0", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["0", "1"], ["1", "0"], ["1", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["1", "0"], ["1", "1"], ["1", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["1", "0"], ["0", "0"], ["1", "1"]], [["1", "1"], ["0", "0"], ["1", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["0", "1"], ["1", "1"], ["1", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["1", "1"], ["0", "0"], ["1", "1"]], [["0", "1"], ["1", "1"], ["1", "0"]], [["1", "0"], ["0", "1"], ["1", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["1", "0"], ["1", "0"], ["0", "0"]], [["1", "0"], ["0", "0"], ["0", "0"]], [["1", "1"], ["0", "0"], ["0", "0"]], [["1", "0"], ["0", "0"], ["0", "0"]], [["1", "1"], ["0", "1"], ["1", "0"]], [["1", "0"], ["0", "0"], ["0", "0"]]])
})

test('Letters and numbers test', () => {
  const result = parser.parserTextToBinBraille("numeros binarios 0 e 1 podem ser uteis")

  expect(result).toStrictEqual([[["1", "1"], ["0", "1"], ["1", "0"]], [["1", "0"], ["0", "0"], ["1", "1"]], [["1", "1"], ["0", "0"], ["1", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["1", "0"], ["1", "1"], ["1", "0"]], [["1", "0"], ["0", "1"], ["1", "0"]], [["0", "1"], ["1", "0"], ["1", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["1", "0"], ["1", "0"], ["0", "0"]], [["0", "1"], ["1", "0"], ["0", "0"]], [["1", "1"], ["0", "1"], ["1", "0"]], [["1", "0"], ["0", "0"], ["0", "0"]], [["1", "0"], ["1", "1"], ["1", "0"]], [["0", "1"], ["1", "0"], ["0", "0"]], [["1", "0"], ["0", "1"], ["1", "0"]], [["0", "1"], ["1", "0"], ["1", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["0", "1"], ["0", "1"], ["1", "1"]], [["0", "1"], ["1", "1"], ["0", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["0", "1"], ["0", "1"], ["1", "1"]], [["1", "0"], ["0", "0"], ["0", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["1", "1"], ["1", "0"], ["1", "0"]], [["1", "0"], ["0", "1"], ["1", "0"]], [["1", "1"], ["0", "1"], ["0", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["1", "1"], ["0", "0"], ["1", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["0", "1"], ["1", "0"], ["1", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["1", "0"], ["1", "1"], ["1", "0"]], [["0", "0"], ["0", "0"], ["0", "0"]], [["1", "0"], ["0", "0"], ["1", "1"]], [["0", "1"], ["1", "1"], ["1", "0"]], [["1", "0"], ["0", "1"], ["0", "0"]], [["0", "1"], ["1", "0"], ["0", "0"]], [["0", "1"], ["1", "0"], ["1", "0"]]])
})

test('Simple symbol testing', () => {
  const result = parser.parserTextToBinBraille("!@#$%ˆ&*()_+={}][\/|:;,.<>?-")

  expect(result).toStrictEqual([[['0', '0'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '1']],
  [['0', '0'], ['0', '1'], ['0', '1']],
  [['0', '1'], ['0', '1'], ['0', '1']],
  [['0', '0'], ['0', '1'], ['1', '1']],
  [['1', '1'], ['1', '0'], ['1', '1']],
  [['0', '0'], ['0', '1'], ['1', '0']],
  [['1', '0'], ['1', '0'], ['0', '1']],
  [['0', '1'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['1', '1'], ['1', '0']],
  [['0', '0'], ['1', '1'], ['1', '1']],
  [['0', '1'], ['1', '1'], ['1', '1']],
  [['1', '0'], ['1', '1'], ['1', '1']],
  [['0', '0'], ['0', '0'], ['0', '1']],
  [['0', '0'], ['1', '0'], ['0', '0']],
  [['0', '1'], ['0', '1'], ['0', '1']],
  [['0', '0'], ['1', '1'], ['0', '0']],
  [['0', '0'], ['1', '0'], ['1', '0']],
  [['0', '0'], ['1', '0'], ['0', '0']],
  [['0', '1'], ['1', '0'], ['0', '1']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['1', '0'], ['0', '1']],
  [['0', '0'], ['0', '0'], ['1', '1']]])
})

test('Complex symbol testing', () => {
  const result = parser.parserTextToBinBraille("©®%§‰")

  expect(result).toStrictEqual([[['1', '0'], ['1', '0'], ['0', '1']],
  [['0', '1'], ['0', '0'], ['0', '1']],
  [['1', '1'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['0', '1'], ['1', '0']],
  [['1', '0'], ['1', '0'], ['0', '1']],
  [['0', '1'], ['0', '0'], ['0', '1']],
  [['1', '0'], ['1', '1'], ['1', '0']],
  [['0', '1'], ['0', '1'], ['1', '0']],
  [['0', '1'], ['0', '1'], ['0', '1']],
  [['0', '0'], ['0', '1'], ['1', '1']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['0', '1'], ['0', '1'], ['0', '1']],
  [['0', '0'], ['0', '1'], ['1', '1']],
  [['0', '0'], ['0', '1'], ['1', '1']]])
})

test('Medium text with accents and numbers', () => {
  const result = parser.parserTextToBinBraille("Este é um texto muito legal, onde podemos passar Letras em maúsculo e com acentuação, ou números como 1024(numero legal né ?)")

  expect(result).toStrictEqual([[['0', '1'], ['0', '0'], ['0', '1']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['0', '1'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['1', '1'], ['1', '1']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '0'], ['1', '1']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['1', '1']],
  [['0', '1'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['1', '1']],
  [['0', '1'], ['1', '0'], ['0', '0']],
  [['0', '1'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['1', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '1'], ['1', '1'], ['0', '0']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['1', '0'], ['1', '0']],
  [['0', '0'], ['1', '0'], ['0', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['1', '1'], ['0', '1'], ['1', '0']],
  [['1', '1'], ['0', '1'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['1', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['1', '1'], ['0', '1'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['1', '0'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['1', '1'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['0', '0'], ['0', '1']],
  [['1', '0'], ['1', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['0', '1'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['1', '1'], ['1', '1']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['1', '1'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '0'], ['1', '1']],
  [['1', '0'], ['1', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '1'], ['0', '1'], ['1', '0']],
  [['0', '1'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['1', '1']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['1', '0'], ['1', '1']],
  [['0', '1'], ['0', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['1', '0'], ['0', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['1', '1']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['0', '1'], ['1', '0']],
  [['0', '1'], ['1', '1'], ['1', '1']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '0'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '1'], ['1', '0'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['0', '1'], ['1', '1']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['0', '1'], ['1', '1'], ['0', '0']],
  [['1', '0'], ['1', '0'], ['0', '0']],
  [['1', '1'], ['0', '1'], ['0', '0']],
  [['1', '0'], ['1', '0'], ['0', '1']],
  [['1', '1'], ['0', '1'], ['1', '0']],
  [['1', '0'], ['0', '0'], ['1', '1']],
  [['1', '1'], ['0', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '0'], ['1', '1'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['1', '0'], ['1', '0']],
  [['1', '0'], ['0', '1'], ['0', '0']],
  [['1', '1'], ['1', '1'], ['0', '0']],
  [['1', '0'], ['0', '0'], ['0', '0']],
  [['1', '0'], ['1', '0'], ['1', '0']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['1', '1'], ['0', '1'], ['1', '0']],
  [['1', '1'], ['1', '1'], ['1', '1']],
  [['0', '0'], ['0', '0'], ['0', '0']],
  [['0', '0'], ['1', '0'], ['0', '1']],
  [['0', '1'], ['0', '1'], ['1', '0']]
])
})